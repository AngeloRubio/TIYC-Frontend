import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { HttpClient } from '@angular/common/http';

import { APP_CONFIG } from '../../../config/app.config';

@Component({
  selector: 'app-forgot-password',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './forgot-password.component.html',
  styleUrls: ['./forgot-password.component.css']
})
export class ForgotPasswordComponent implements OnInit {
  
  currentStep: 'request' | 'verify' | 'reset' | 'success' = 'request';
  isLoading = false;
  errorMessage = '';
  successMessage = '';
  recoveryToken = '';
  isDevMode = true; // Por defecto true para desarrollo
  
  formData = {
    email: '',
    token: '',
    newPassword: '',
    confirmPassword: ''
  };
  
  constructor(
    private http: HttpClient,
    private router: Router,
    private route: ActivatedRoute
  ) {}
  
  ngOnInit(): void {
    console.log('üîë ForgotPasswordComponent inicializado');
    
    // Verificar si viene con un token en la URL (para emails)
    const tokenFromUrl = this.route.snapshot.queryParams['token'];
    if (tokenFromUrl) {
      this.formData.token = tokenFromUrl;
      this.currentStep = 'verify';
      console.log('üîó Token detectado en URL, saltando a verificaci√≥n');
    }
  }
  
  onRequestReset(): void {
    if (this.isLoading) return;
    
    console.log('üìß Solicitando reset para:', this.formData.email);
    
    this.isLoading = true;
    this.errorMessage = '';
    this.successMessage = '';
    
    const url = `${APP_CONFIG.API_BASE_URL}/auth/forgot-password`;
    console.log('üì° Enviando request a:', url);
    
    this.http.post<any>(url, { email: this.formData.email }).subscribe({
      next: (response) => {
        console.log('‚úÖ Respuesta recibida:', response);
        
        if (response.success) {
          this.successMessage = response.message;
          this.recoveryToken = response.recovery_token || ''; // Para desarrollo
          this.currentStep = 'verify';
          
          console.log('‚úÖ C√≥digo enviado exitosamente');
        } else {
          this.errorMessage = response.error || 'Error al enviar c√≥digo';
          console.log('‚ùå Error en respuesta:', this.errorMessage);
        }
        this.isLoading = false;
      },
      error: (error) => {
        console.error('üí• Error en request:', error);
        this.errorMessage = 'Error de conexi√≥n. ¬øEst√° corriendo el servidor?';
        this.isLoading = false;
      }
    });
  }
  
  onVerifyCode(): void {
    if (this.isLoading) return;
    
    console.log('üîç Verificando c√≥digo:', this.formData.token.substring(0, 10) + '...');
    
    this.isLoading = true;
    this.errorMessage = '';
    
    const url = `${APP_CONFIG.API_BASE_URL}/auth/verify-recovery-token`;
    
    this.http.post<any>(url, { token: this.formData.token }).subscribe({
      next: (response) => {
        console.log('‚úÖ Verificaci√≥n response:', response);
        
        if (response.success) {
          this.currentStep = 'reset';
          console.log('üîì Token v√°lido, procediendo a reset');
        } else {
          this.errorMessage = response.error || 'C√≥digo inv√°lido';
          console.log('‚ùå Token inv√°lido:', this.errorMessage);
        }
        this.isLoading = false;
      },
      error: (error) => {
        console.error('üí• Error en verificaci√≥n:', error);
        this.errorMessage = 'Error al verificar c√≥digo. Int√©ntalo de nuevo.';
        this.isLoading = false;
      }
    });
  }
  
  onResetPassword(): void {
    if (this.isLoading) return;
    
    if (this.formData.newPassword !== this.formData.confirmPassword) {
      this.errorMessage = 'Las contrase√±as no coinciden';
      return;
    }
    
    console.log('üîê Cambiando contrase√±a...');
    
    this.isLoading = true;
    this.errorMessage = '';
    
    const url = `${APP_CONFIG.API_BASE_URL}/auth/reset-password`;
    
    this.http.post<any>(url, {
      token: this.formData.token,
      new_password: this.formData.newPassword
    }).subscribe({
      next: (response) => {
        console.log('‚úÖ Reset response:', response);
        
        if (response.success) {
          this.currentStep = 'success';
          console.log('üéâ Contrase√±a cambiada exitosamente');
        } else {
          this.errorMessage = response.error || 'Error al cambiar contrase√±a';
          console.log('‚ùå Error al cambiar:', this.errorMessage);
        }
        this.isLoading = false;
      },
      error: (error) => {
        console.error('üí• Error en reset:', error);
        this.errorMessage = 'Error al cambiar contrase√±a. Int√©ntalo de nuevo.';
        this.isLoading = false;
      }
    });
  }
  
  useDevToken(): void {
    if (this.recoveryToken) {
      this.formData.token = this.recoveryToken;
      console.log('‚úÖ Token copiado al campo de verificaci√≥n');
    }
  }
  
  goBack(): void {
    if (this.currentStep === 'verify') {
      this.currentStep = 'request';
      this.errorMessage = '';
    } else if (this.currentStep === 'reset') {
      this.currentStep = 'verify';
      this.errorMessage = '';
    }
    console.log('‚¨ÖÔ∏è Volviendo al paso anterior');
  }
  
  goToLogin(): void {
    console.log('üö™ Navegando al login');
    this.router.navigate(['/login']);
  }
  
  clearError(): void {
    this.errorMessage = '';
  }
  
  getStepDescription(): string {
    switch (this.currentStep) {
      case 'request':
        return 'Paso 1: Solicitar c√≥digo de recuperaci√≥n';
      case 'verify':
        return 'Paso 2: Verificar c√≥digo';
      case 'reset':
        return 'Paso 3: Crear nueva contrase√±a';
      case 'success':
        return '¬°Proceso completado!';
      default:
        return '';
    }
  }
}